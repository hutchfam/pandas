### Note
* Instructions have been included for each segment. You do not have to follow them exactly, but they are included to help you think through the steps.

# Dependencies and Setup
import pandas as pd
import numpy as np

# File to Load (Remember to Change These)
school_data_to_load = "Resources/schools_complete.csv"
student_data_to_load = "Resources/students_complete.csv"

# Read School and Student Data File and store into Pandas DataFrames
school_data = pd.read_csv(school_data_to_load)
student_data = pd.read_csv(student_data_to_load)

# Combine the data into a single dataset.  
school_data_complete = pd.merge(student_data, school_data, how="left", on=["school_name", "school_name"])
school_data_complete

## District Summary

* Calculate the total number of schools

* Calculate the total number of students

* Calculate the total budget

* Calculate the average math score 

* Calculate the average reading score

* Calculate the percentage of students with a passing math score (70 or greater)

* Calculate the percentage of students with a passing reading score (70 or greater)

* Calculate the percentage of students who passed math **and** reading (% Overall Passing)

* Create a dataframe to hold the above results

* Optional: give the displayed data cleaner formatting

#Count the total number of schools by count rowns on school_data

total_num_school = school_data.count()
len(total_num_school.index)
#print("Total Numbers of School: " + str(len(school_data.index)))

#Count the total number of students by count rowns on school_data
total_num_students = student_data["student_name"].count()
#len(total_num_students.index)
#print("Total Numbers of Students: " + str(len(student_data.index)))

#Add the budget of all schools 
total_budget = school_data["budget"].sum()
#print("School Budget: " + str(total_budget))

#Avg math score of each student
avg_math_score = round(student_data["math_score"].mean(),2)
#print("Average Math Score: " + (str(avg_math_score)))

#Avg readind score of each student
avg_read_score = round(student_data["reading_score"].mean(),2)
#print("Average Reading Score: " + (str(avg_read_score)))

#avg passing math students
sev_student_math = student_data[student_data["math_score"] >= 70]
per_student_math = ((len(sev_student_math.index) / len(student_data.index)) *100)
per_student_math = round((per_student_math),2)
#print("Average Students in Math with 70% or Greater: " + (str(per_student_math)))

#avg passing reading students
sev_student_read = student_data[student_data["reading_score"] >= 70]
per_student_read = ((len(sev_student_read.index) / len(student_data.index)) *100)
per_student_read = round((per_student_read),2)
#print("Average Students in Reading with 70% or Greater: " + (str(per_student_read)))

sev_student_overall = school_data_complete.loc[(school_data_complete['math_score'] >= 70) & 
                                                (school_data_complete['reading_score'] >= 70)]
sev_student_overall_cnt = sev_student_overall.count()
per_student_overall = ((sev_student_overall_cnt / total_num_students)  *100)
per_student_overall = round((per_student_overall),2)



#print a summary table
summary_table_df = pd.DataFrame ({"Total Numbers of Schools": [str(len(school_data.index))],
                               "Total Numbers of Students": [str(len(student_data.index))],
                               "School Budget": [total_budget],
                               "Average Math Score": [avg_math_score],
                               "Average Reading Score": [avg_read_score],
                               "Average Students in Math with 70% or Greater": [per_student_math],
                               "Average Students in Reading with 70% or Greater": [per_student_read],
                                "Percentage Student Overall": [per_student_overall]})
summary_table_df


## School Summary

* Create an overview table that summarizes key metrics about each school, including:
  * School Name
  * School Type
  * Total Students
  * Total School Budget
  * Per Student Budget
  * Average Math Score
  * Average Reading Score
  * % Passing Math
  * % Passing Reading
  * % Overall Passing (The percentage of students that passed math **and** reading.)
  
* Create a dataframe to hold the above results

#sort_by_school_df = school_data_complete.groupby(["school_name", "type"])
#sort_by_school_df.count()




#print(school_data_complete) #(this allowed me to look at the data on one screen instead of going back and fourth to the csv)

# Create a summary tabel for each school
#total_num_school = school_data_complete[["school_name", "type", "students_per_school", "budget_per_students"]]
#The summary will have the following:

#School Name
sort_by_school_df = school_data_complete.groupby(["school_name", "type"])
print(sort_by_school_df)
#school_data_complete = school_data_complete.set_index('school_name')
groupby_df = sort_by_school_df.mean()

#School Type

#Total Number of Students
students_per_school = sort_by_school_df['student_name'].count()
groupby_df["Student Count"] = students_per_school

#Total School Budget
budget_per_school = school_data_complete['budget'].sum()

#Per student Budget
per_student_budget_school = groupby_df["budget"] / groupby_df["size"]
groupby_df["Per Student Budget"] = per_student_budget_school

#%passing math

sev_student_math = student_data[student_data["math_score"] >= 70]
pass_math_stuff = sev_student_math.groupby(["school_name"]).count()["student_name"]
per_tired_pass_math = (pass_math_stuff / students_per_school) * 100
groupby_df["% Passing Math"] = per_tired_pass_math
#%passing reading

sev_student_read = student_data[student_data["reading_score"] >= 70]
pass_read_stuff = sev_student_read.groupby(["school_name"]).count()["student_name"]
per_tired_pass_read = (pass_read_stuff / students_per_school) * 100
groupby_df["% Passing Reading"] = per_tired_pass_read


school_sev_student_overall = school_data_complete[(school_data_complete['math_score'] >= 70) & 
                                                (school_data_complete['reading_score'] >= 70)]
sev_student_overall_cnt = school_sev_student_overall.groupby(["school_name"]).count()["student_name"]
school_per_student_overall = ((sev_student_overall_cnt / students_per_school)  *100)
groupby_df["Overall Passing"] = school_per_student_overall


#del school_data_complete ['Student ID']
#del school_data_complete ['School ID']

groupby_df

## Top Performing Schools (By % Overall Passing)

* Sort and display the top five performing schools by % overall passing.

#I would sort by overall passing grade. 
#How to put in descending order?
#How to put just top 5
top_schools = groupby_df.sort_values(["Overall Passing"],ascending = False)
top_schools.head()

## Bottom Performing Schools (By % Overall Passing)

* Sort and display the five worst-performing schools by % overall passing.

#I would sort by overall passing grade. 
#How to put in ascending order?
#How to put just top 5
bottom_schools = groupby_df.sort_values(["Overall Passing"])
bottom_schools.head()

## Math Scores by Grade

* Create a table that lists the average Reading Score for students of each grade level (9th, 10th, 11th, 12th) at each school.

  * Create a pandas series for each grade. Hint: use a conditional statement.
  
  * Group each series by school
  
  * Combine the series into a dataframe
  
  * Optional: give the displayed data cleaner formatting

#set columns for each grade 
# Need to pull over Math Scores

ninth_df = school_data_complete[(school_data_complete["grade"] == "9th")]
math_ninth = ninth_df.groupby(["school_name"]).mean()["math_score"]

tenth_df = school_data_complete[(school_data_complete["grade"] == "9th")]
math_tenth = tenth_df.groupby(["school_name"]).mean()["math_score"]

eleventh_df = school_data_complete[(school_data_complete["grade"] == "9th")]
math_eleventh = eleventh_df.groupby(["school_name"]).mean()["math_score"]

twe_df = school_data_complete[(school_data_complete["grade"] == "9th")]
math_twe = twe_df.groupby(["school_name"]).mean()["math_score"]
#tenth_df
#eleven_df
# will require each student
# Will group each grade and student by school name
# Create a dataframe for the result

math_avg_by_grade_df = pd.DataFrame({"9th Grade": math_ninth,
                                    "10th Grade": math_tenth,
                                    "11th Group": math_eleventh,
                                    "12th Group": math_twe})
math_avg_by_grade_df

## Reading Score by Grade 

* Perform the same operations as above for reading scores

#set columns for each grade 
# Need to pull over Reading Scores
# will require each student
ninth_df = school_data_complete[(school_data_complete["grade"] == "9th")]
read_ninth = ninth_df.groupby(["school_name"]).mean()["reading_score"]

tenth_df = school_data_complete[(school_data_complete["grade"] == "9th")]
read_tenth = tenth_df.groupby(["school_name"]).mean()["reading_score"]

eleventh_df = school_data_complete[(school_data_complete["grade"] == "9th")]
read_eleventh = eleventh_df.groupby(["school_name"]).mean()["reading_score"]

twe_df = school_data_complete[(school_data_complete["grade"] == "9th")]
read_twe = twe_df.groupby(["school_name"]).mean()["reading_score"]
#tenth_df
#eleven_df
# will require each student
# Will group each grade and student by school name
# Create a dataframe for the result

reading_avg_by_grade_df = pd.DataFrame({"9th Grade": read_ninth,
                                    "10th Grade": read_tenth,
                                    "11th Group": read_eleventh,
                                    "12th Group": read_twe})
reading_avg_by_grade_df
# Will group each grade and student by school name
# Create a dataframe for the result

## Scores by School Spending

* Create a table that breaks down school performances based on average Spending Ranges (Per Student). Use 4 reasonable bins to group school spending. Include in the table each of the following:
  * Average Math Score
  * Average Reading Score
  * % Passing Math
  * % Passing Reading
  * Overall Passing Rate (Average of the above two)

#Need to use bins to establish four spending ranges
# Each spending range will require:
    #Avg Math Score

    
bins = [0,585,630,645,676]
labels = ["<$584", "$585-629", "$630-644", "$645-675"]
school_spending_df = groupby_df
school_spending_df["Spending Range"]=pd.cut(per_student_budget_school, bins, labels=labels)

school_spending_df
    
    #% Passing Math
    #% Passing Read
    #Overall Passing rate for both


## Scores by School Size

* Perform the same operations as above, based on school size.

#Need to use bins to establish four school sizes
# Each size range will require:
    #Avg Math Score
    #Ave Read Score

    
bins = [0,1001,2001,5001]
labels = ["Small (<1000)", "Medium (<1000)", "Large (<1000)"]

school_data_complete["School Size"]=pd.cut(school_data_complete["size"], bins, labels=labels)

school_size_score_df = school_data_complete.groupby(["School Size"])

school_size_score_df.mean()

#sort_by_school_df = school_data_complete.groupby(["school_name", "type"])
#print(sort_by_school_df)
#school_data_complete = school_data_complete.set_index('school_name')
#groupby_df = sort_by_school_df.mean()
    #% Passing Math
    #% Passing Read
    #Overall Passing rate for both

## Scores by School Type

* Perform the same operations as above, based on school type

#Need to use bins to establish by school type
# Each type range will require:
    #Avg Math Score
    #Ave Read Score
#group by like you did for the school panda
school_size_score_df = groupby_df
school_size_score_df["School Type"]=pd.cut(per_student_budget_school, bins, labels=labels)
    #% Passing Math
    #% Passing Read
    #Overall Passing rate for both

